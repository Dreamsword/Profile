pipeline {
    agent {
        node { 
           label 'built-in-node'
        }
    }
    environment{
        MY_FILE = fileExists '.git'
    } 

    stages{
        stage('Update Repo') {
            when { expression { MY_FILE == 'true' } }
            steps {
                sh 'git pull origin main'
            }
        }

        stage('Clone Repo') {
            when { expression { MY_FILE == 'false' } }
            steps {
                withCredentials([string(credentialsId: 'github-devops-token', variable: 'githubToken')]) {
                    sh 'git clone "https://${githubToken}@github.com/Clevva-SA/dockerfiles.git" .'
                }
            }
        }

        stage('Prepare Files For Docker Container') {
            steps {
                withCredentials([string(credentialsId: 'github-devops-token', variable: 'githubToken')]) {
                    script {
                        if (params.Project == 'Digiboost Dev') {
                            prepareClevva('dev');
                            prepareCheckable('dev');
                        }
                        
                        else if (params.Project == 'Digiboost UAT') {
                            prepareClevva('uat');
                            prepareCheckable('uat');
                        }

                        else if (params.Project == 'Digiboost Prod') {
                            prepareClevva('prod');
                            prepareCheckable('prod');
                        }

                        else if (params.Project == 'Digiboost Reporting') {
                            prepareClevva('digiboost_reporting');
                        }

                        else if (params.Project == 'Generic 7.4') {
                            prepareClevva('main');
                        }

                        else if (params.Project == 'Generic 8.1') {
                            prepareClevva('php8');
                        }

                        else if (params.Project == 'Telkom' || params.Project == 'Telkom Demo') {
                            prepareClevva('telkom');
                        }
                    }
                }
            }
        }

        stage('Build Container') {
            steps {
                script {
                    if (params.Project == 'Generic 7.4') {
                        dockerBuildGeneric('7.4');
                    } 
                    
                    else if (params.Project == 'Generic 8.1') {
                        dockerBuildGeneric('8.1');
                    }

                    else if (params.Project == 'Telkom' || params.Project == 'Telkom Demo') {
                        prepareTelkomFiles();
                        dockerBuildGeneric('telkom');
                    }

                    else if (params.Project == 'Polyflor') {
                        dockerBuildGeneric('polyflor');
                    }
                }
            }
        }

        stage('Build Digiboost Container') {
            when {
                expression {
                    return params.Project == 'Digiboost Dev' || params.Project == 'Digiboost UAT' || params.Project == 'Digiboost Prod' || params.Project == 'Digiboost Reporting'
                }
            }
            steps {
                script {
                    if (params.Project == 'Digiboost Dev') {
                        dockerBuildGCP('dev', 'clevva-fqijgbhoua-ts', 'clevva-fqijgbhoua-ts.a.run.app', 'development-navigator', 'development-navigator:australia-southeast1:development-clevva', 'App')
                    }

                    else if (params.Project == 'Digiboost UAT') {
                        dockerBuildGCP('uat', 'clevva-figro5woaa-ts', 'clevva-figro5woaa-ts.a.run.app', 'uat-navigator', 'uat-navigator:australia-southeast1:uat-clevva', 'App');
                    }

                    else if (params.Project == 'Digiboost Prod') {
                        dockerBuildGCP('prod', 'clevva-kkz53kivua-ts', 'clevva-kkz53kivua-ts.a.run.app', 'production-navigator', 'production-navigator:australia-southeast1:production-clevva', 'App');
                    }

                    else if (params.Project == 'Digiboost Reporting') {
                        dockerBuildGCP('prod', 'clevva-kkz53kivua-ts', 'clevva-kkz53kivua-ts.a.run.app', 'production-navigator', 'production-navigator:australia-southeast1:production-clevva', 'Reporting');
                    }
                }
            }
        }

        stage('Publish Container') {
            steps {
                script {
                    if (params.Project == 'Digiboost Dev') {
                        dockerPublish('dev', 'development-navigator', 'digiboost_dev')
                    }

                    else if (params.Project == 'Digiboost UAT') {
                        dockerPublish('uat', 'uat-navigator', 'digiboost_uat')
                    }

                    else if (params.Project == 'Digiboost Prod') {
                        dockerPublish('prod', 'production-navigator', 'digiboost_prod')
                    }

                    else if (params.Project == 'Digiboost Reporting') {
                        dockerPublish('prod', 'production-navigator', 'digiboost_reporting')
                    }

                    else if (params.Project == 'Generic 7.4') {
                        sh 'docker push ghcr.io/clevva-sa/clevva_app:7.4'
                    }

                    else if (params.Project == 'Generic 8.1') {
                        sh 'docker push ghcr.io/clevva-sa/clevva_app:8.1'
                    }

                    else if (params.Project == 'Telkom') {
                        sh 'docker push ghcr.io/clevva-sa/clevva_app:telkom'
                    }

                    else if (params.Project == 'Telkom Demo') {
                        sh 'docker push ghcr.io/clevva-sa/clevva_app:telkom_demo'
                    }

                    else if (params.Project == 'Polyflor') {
                        sh 'docker push ghcr.io/clevva-sa/clevva_app:polyflor'
                    }
                }
                sh 'yes "y" | docker image prune && docker system prune -af'
            }
        }
    }
}

def prepareTelkomFiles() {
    withCredentials([string(credentialsId: 'github-devops-token', variable: 'githubToken')]) {
        sh """
            rm -rf telkom-gethelp
            git clone "https://${githubToken}@github.com/Clevva-SA/telkom-gethelp.git" telkom-gethelp
            rm -rf telkom-gethelp/.git
        """
    }
}

def prepareCheckable(project) {
    withCredentials([string(credentialsId: 'github-devops-token', variable: 'githubToken')]) {
        sh """
            rm -rf checkable
            git clone --branch ${project} "https://${githubToken}@github.com/Clevva-SA/deploy-checkable.git" checkable
            rm -rf checkable/.git && rm -rf checkable/.github
        """
    }
}

def prepareClevva(project) {
    withCredentials([string(credentialsId: 'github-devops-token', variable: 'githubToken')]) {

        script {
            if (params.Project == 'Digiboost Reporting') {
                sh """
                    git clone --branch dev "https://${githubToken}@github.com/Clevva-SA/clevva-reporting.git" reporting
                """
            }

            else {
                sh """
                    rm -rf clevva
                    git clone --branch ${project} "https://${githubToken}@github.com/Clevva-SA/deploy.git" clevva
                    rm -rf clevva/.git
                """
            }
        }
        

        script {
            if (params.Project == 'Telkom Demo') {
                dir('clevva') {
                    sh """
                        rm -rf starboard
                        git clone "https://${githubToken}@github.com/Clevva-SA/starboard-deploy.git" starboard
                        rm -rf starboard/.git
                    """
                }
            }
  
        }
    }
}

def dockerBuildGeneric(version) {
        script {
            if (params.Project == 'Telkom Demo') {
                sh """
                    docker build \
                    -f Generic/App/${version}/Dockerfile \
                    -t ghcr.io/clevva-sa/clevva_app:${version}_demo \
                    --build-arg SUBDOMAIN="${version}" \
                    --no-cache \
                    .
                """

            }

            else {
                sh """
                    docker build \
                    -f Generic/App/${version}/Dockerfile \
                    -t ghcr.io/clevva-sa/clevva_app:${version} \
                    --build-arg SUBDOMAIN="${version}" \
                    --no-cache \
                    .
                """
            }
        }
}

def dockerBuildGCP(project, subdomain, url, instance, connection_string, type) {
    withCredentials([
        string(credentialsId: "digiboost-db-host-${project}", variable: 'DB_HOST'),
        string(credentialsId: "digiboost-db-user-${project}", variable: 'DB_USER'),
        string(credentialsId: "digiboost-db-name-${project}", variable: 'DB_NAME'),
        string(credentialsId: "digiboost-db-pass-${project}", variable: 'DB_PASS',),
        file(credentialsId: "digiboost-checkable-env-${project}", variable: 'ENV'), 
        file(credentialsId: "digiboost-dialogflow-keyfile-${project}", variable: 'NLU_KEY'),
        file(credentialsId: "digiboost-starboard-ini-${project}", variable: 'STARBOARD_INI'),
        file(credentialsId: "digiboost-widget-json-${project}", variable: 'WIDGET_JSON'),
        file(credentialsId: "digiboost-sqlproxy-keyfile-${project}.json", variable: 'SQLPROXY_KEY'),
        file(credentialsId: "digiboost-storage-keyfile-${project}", variable: 'STORAGE_KEY'),
        file(credentialsId: "digiboost-reporting-env-${project}", variable: 'REPORTING_ENV'),
        file(credentialsId: "digiboost-reporting-env-json-${project}", variable: 'REPORTING_ENV_JSON'),
    ]) {

        writeFile file: '.env', text: readFile(ENV)
        writeFile file: '.reporting_env', text: readFile(REPORTING_ENV)
        writeFile file: '.reporting_env_json', text: readFile(REPORTING_ENV_JSON)
        writeFile file: "digiboost-dialogflow-keyfile-${project}.json", text: readFile(NLU_KEY)
        writeFile file: "${url}.ini", text: readFile(STARBOARD_INI)
        writeFile file: "${url}.json", text: readFile(WIDGET_JSON)
        writeFile file: "digiboost-sqlproxy-keyfile-${project}.json", text: readFile(SQLPROXY_KEY)
        writeFile file: "digiboost-storage-keyfile-${project}.json", text: readFile(STORAGE_KEY)
        
        sh """
            docker build \
            -f Digiboost/${type}/Dockerfile \
            -t ghcr.io/clevva-sa/clevva_app:digiboost_${project} \
            -t gcr.io/${instance}/clevva \
            --build-arg PROJECT="Digiboost_${project}" \
            --build-arg TIMEZONE="Pacific/Auckland" \
            --build-arg SUBDOMAIN="${subdomain}" \
            --build-arg INSTANCE_CONNECTION_NAME="${connection_string}" \
            --build-arg SQL_PROXY_KEY=digiboost-sqlproxy-keyfile-${project}.json \
            --build-arg STORAGE_KEY=digiboost-storage-keyfile-${project}.json \
            --build-arg DB_HOST=$DB_HOST \
            --build-arg DB_USER=$DB_USER \
            --build-arg DB_NAME=$DB_NAME \
            --build-arg DB_PASS=$DB_PASS \
            --build-arg CHECKABLE_CONFIG=.env \
            --build-arg REPORTING_CONFIG=.reporting_env \
            --build-arg REPORTING_ENV_JSON=.reporting_env_json \
            --build-arg NLU_KEY=digiboost-dialogflow-keyfile-${project}.json \
            --build-arg STARBOARD_INI=${url}.ini \
            --build-arg WIDGET_INI=${url}.json \
            --no-cache \
            .

            rm -rf .env .reporting_env digiboost-dialogflow-keyfile-${project}.json ${url}.ini ${url}.json digiboost-sqlproxy-keyfile-${project}.json digiboost-storage-keyfile-${project}.json
        """
    }
}

def dockerPublish(project, gcp_project_id, name) {

    withCredentials([
        string(credentialsId: 'github-devops-token', variable: 'githubToken'),
        file(credentialsId: "digiboost-cloudrun-keyfile-${project}", variable: 'CLOUDRUN_KEY'),
    ]) {

        sh 'echo ${githubToken} | docker login ghcr.io -u Clevva-Devops --password-stdin'
        writeFile file: "digiboost-cloudrun-keyfile-${project}.json", text: readFile(CLOUDRUN_KEY)
                            
        sh """
            docker push ghcr.io/clevva-sa/clevva_app:${name}

            gcloud auth activate-service-account --key-file=./digiboost-cloudrun-keyfile-${project}.json
            docker push gcr.io/${gcp_project_id}/${name}

            rm -rf digiboost-cloudrun-keyfile-${project}.json
        """
    }
}